[["index.html", "Multi-state modelling with msm: a practical course Part 1 Course overview 1.1 Prerequisites", " Multi-state modelling with msm: a practical course Christopher Jackson 2021-08-11 Part 1 Course overview 3 hours? Describe lecture vs practical balance. 1. Multistate modelling theory review 2. Basic use of msm 3. Prediction from models with msm 4. msm models with covariates 5. msm models with time-dependent covariates 6. Advanced topics (if there is time) 1.1 Prerequisites Laptop with R and the msm package installed Basic knowledge of R Basic statistics / probability, ideally from a medical/biostatistics perspective. Some knowledge of survival analysis would help. "],["theory.html", "Part 2 Multi-state modelling theory: recap 2.1 Multi-state processes 2.2 msm models work in continuous time 2.3 Intermittently-observed data 2.4 Time-to-event data (not covered in this course) 2.5 Examples used for illustration", " Part 2 Multi-state modelling theory: recap Recap of the PDF intro course notes linked here for your reference More information about msm in the msm package vignette the Journal of Statistical Software paper A more in-depth treatment about this kind of modelling can be found in van den Hout (2017) applications in life-course / ageing epidemiology Cook and Lawless (2018) more advanced mathematically, greater variety of models 2.1 Multi-state processes Multi-state models represent processes that can be described as discrete states that change through time. The msm package can be used for any state and transition structure. Examples in the course represent stages of a disease. For example, a progressive disease with death from any state ( from Sharples et al. ) Progression through stages of an irreversible non-fatal condition (from Gladman and Farewell) A relapsing-remitting condition with no final state (from Jackson et al.) 2.2 msm models work in continuous time Model represents movement between discrete states in continuous time 2.2.1 Transition intensities Continuous-time Markov models are defined by transition intensities \\(q_{rs}(t)\\) between pairs of states \\(r,s\\). Transition intensity matrix \\(Q\\) with diagonals \\(q_{rr}(t) = -\\sum_{s!=r} q_{rs}(t)\\). 2.2.2 Transition probabilities If \\(Q(t) = Q\\) is constant over time, we can compute the transition probability matrix over any time unit as \\(P(t) = Exp(tQ)\\) where Exp is the matrix exponential. Entries \\(p_{rs}(t)\\) define the probability someone in state \\(r\\) now is in state \\(s\\) at a time \\(t\\) years from now. Discrete-time models are defined by transition probabilities \\(p_{rs}\\) over one unit of time. Less common that continuous-time models in medical applications, since data are not generally on a regular discrete-time grid. Careful of these distinctions 2.3 Intermittently-observed data msm is mainly designed for data that are intermittently observed and variants of this format (links when done) [ Question to probe understanding? ] 2.4 Time-to-event data (not covered in this course) In multi-state time-to-event data, we know the exact times of transitions between all states, potentially with right-censoring Patient Months Event 1 0 Start of follow up 1 50 Disease diagnosis 1 60 Death Competing risks analyses are a special case: e.g. survival data with one alive state and multiple death states for different causes. msm can be used for this kind of data, but relies on strong assumptions: intensites are piecewise constant, i.e. constant over a series of time intervals, or a step function of time. models are Markov Other R packages are better designed for multi-state time-to-event data: flexsurv for fully parametric models survival and mstate for semiparametric models 2.5 Examples used for illustration 2.5.1 Psoriatic arthritis Figure 2.1: Psoriatic arthritis Factors governing progression of joint damage, an irreversible condition. Available as psor in the msm package. 2.5.2 Cardiac allograft vasculopathy after heart transplantation Figure 2.2: CAV after heart transplantation A condition similar to coronary artery disease that occurs in people who have had heart transplants. Clinically irreversible, but measured state can go backwards or forwards Available as cav in the msm package. "],["msmbasic.html", "Part 3 Using msm for a basic model 3.1 Basic requirements for a msm model 3.2 Summarising the data 3.3 Specifying the transition structure 3.4 Transition structure is for the continuous time process 3.5 Maximum likelihood estimation 3.6 Intuition for what transition intensities mean 3.7 msm default output 3.8 Exact death times 3.9 Exercises 3.10 Solutions 3.11 Postscript: What if it doesnt converge?", " Part 3 Using msm for a basic model Model the progression through time of joint damage in psoriatic arthritis Estimate, e.g. probability that someone with no damaged joints will have 10 or more damaged joints 5 years from now. Total time expected to spend over the next 10 years with 10 or more damaged joints. No covariates for the moment. Figure 3.1: Psoriatic arthritis 3.1 Basic requirements for a msm model At minimum, need to specify The dataset, and which columns indicate the state, time (and patient) States should be numbers, 1, 2, 3, etc. Time should be increasing within each patient Patients should be grouped together in the data The transition structure of the model 3.2 Summarising the data Example psor dataset in the package library(msm) head(psor, 5) ## ptnum months state hieffusn ollwsdrt ## 1 1 6.4606 1 0 1 ## 2 1 17.0780 1 0 1 ## 3 2 26.3217 1 0 0 ## 4 2 29.4839 3 0 0 ## 5 2 30.5763 4 0 0 ptnum: subject / patient ID months: months of follow up state: state of joint damage A simple summary of the data is a count of the number of transitions over visit intervals, i.e. the number of people observed in one state at one visit, and each other state at the next visit. statetable.msm(state, ptnum, data=psor) ## to ## from 1 2 3 4 ## 1 183 56 16 8 ## 2 0 100 35 18 ## 3 0 0 48 37 For example, 16 people were in state 1 (0-1 damaged joints) at one visit followed by state 3 (5-9 damaged joints) at the next visit. We also want some idea of the time scale, so we summarise the time variable. summary(psor$months) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0712 3.5004 7.3341 9.9557 13.1340 57.0602 The inter-visit times, and number of observations per patient, may also be interesting to summarise. 3.3 Specifying the transition structure We now define in R which transitions are allowed in continuous time Define a matrix with \\(r\\), \\(s\\) entry 0 where the \\(r\\),\\(s\\) transition is disallowed 1 where the transition is allowed (actually this can be any non-zero positive number) In this example we allow transitions from state 1 to state 2, from 2 to 3, and from 3 to 4. Q &lt;- rbind(c(0, 1, 0, 0), c(0, 0, 1, 0), c(0, 0, 0, 1), c(0, 0, 0, 0)) The diagonal entries of this matrix do not matter. 3.4 Transition structure is for the continuous time process Note that when we summarised the transitions over visit intervals we counted 16 people in state 3 at the next visit after being observed in state 1. So why do we not allow a State 1 to State 3 transition? Because these 1-3 transitions happened over a time interval, not in continuous time These 16 people must have gone through state 2 (unobserved) in between their visits Multi-state models are commonly used in situations like this, for ordered states of disease severity, e.g. with states derived by discretising a continuous variable. Transitions should then only be allowed between adjacent states in continuous time. 3.5 Maximum likelihood estimation Now we invoke the msm function to fit the multi-state model to the data: estimating the transition intensities. This uses optim to find the minimum of the minus log likelihood. It has to start this search from plausible initial values for the parameters. Two ways to do this: Easiest way that usually works: tell msm to auto-generate initial values with the argument gen.inits=TRUE. psor.msm &lt;- msm(state ~ months, subject = ptnum, data = psor, qmatrix = Q, gen.inits=TRUE) Alternatively: supply initial values yourself in the qmatrix, instead of 1s, in the positions corresponding to the transitions. If you do this for different initial values, and it converges to the same answer, that gives reassurance that the answer is the true maximum likelihood estimate. Q &lt;- rbind(c(0, 0.1, 0, 0), c(0, 0, 0.1, 0), c(0, 0, 0, 0.1), c(0, 0, 0, 0)) psor.msm &lt;- msm(state ~ months, subject = ptnum, data = psor, qmatrix = Q, gen.inits=TRUE) But where do we get the initial values from? 3.6 Intuition for what transition intensities mean The mean sojourn time \\(E(T_r)\\) is the average time spent in state \\(r\\) before moving to another state If the intensities \\(q_{rs}\\) are constant over time, then \\(E(T_r) = -1/q_{rr}\\) where \\(q_{rr} = -\\sum_{s!=r} q_{rs}\\) So we might guess that someone spends an average of 10 months in state 1 before moving to state 2 : \\(q_{12} = 0.1\\) 10 months in state 2 before moving to state 3 : \\(q_{23} = 0.1\\) 10 months in state 3 before moving to state 4 : \\(q_{23} = 0.1\\) and use these as initial values to start the search for the maximum likelihood estimates. Initial values do not usually need to be close to the true estimates, just within an order of magnitude. See the exercise for a slightly harder example 3.7 msm default output When the optimisation has converged, msm returns an object containing list of information about the fitted model (see help(msm.object) for the list structure). Printing this object gives the estimated transition intensities and their confidence intervals. psor.msm ## ## Call: ## msm(formula = state ~ months, subject = ptnum, data = psor, qmatrix = Q, gen.inits = TRUE) ## ## Maximum likelihood estimates ## ## Transition intensities ## Baseline ## State 1 - State 1 -0.09125 (-0.11366,-0.07325) ## State 1 - State 2 0.09125 ( 0.07325, 0.11366) ## State 2 - State 2 -0.15716 (-0.19699,-0.12538) ## State 2 - State 3 0.15716 ( 0.12538, 0.19699) ## State 3 - State 3 -0.25982 (-0.33538,-0.20129) ## State 3 - State 4 0.25982 ( 0.20129, 0.33538) ## ## -2 * log-likelihood: 1246.015 ## [Note, to obtain old print format, use &quot;printold.msm&quot;] How was our initial guess that people spent 10 years in each state? 3.8 Exact death times In medical research, we usually know the day when someone dies. In contrast, the entry time into states of disease is not known in the applications here  we only know the state at intermittent observation times. Hence, if one of the states is death, then we need to tell msm that the entry time into this state is known exactly, but the state at the previous instant is unknown. msm(..., deathexact=TRUE, ...) More generally, each row of the data could represent a different type of observation, indicated by an extra variable in the dataset, whose name is supplied as the obstype argument to msm. The values of this variable can be 1, 2 or 3, e.g. an intermittent observation of a state (obstype=1). This is the default. known time of transition out of the previously-observed state (obstype=2). Not considered in this course. If all observations are of this type, this is equivalent to time-to-event data where the state is known at all times. entry time observed exactly but state at previous instant unknown (obstype=3). If death states always have obtype=3, this is equivalent to deathexact=TRUE. Here is an artificial example: ## PTNUM years state obstype ## 1 100002 0.000000 1 1 ## 2 100002 1.002740 1 1 ## 3 100002 2.002740 2 1 ## 4 100002 3.093151 2 2 ## 5 100002 4.000000 2 1 ## 6 100002 4.997260 3 2 ## 7 100002 5.854795 4 3 msm(state ~ years, obstype=obstype, ...) 3.9 Exercises From the CAV dataset cav in the package, write R code to: Summarise the transitions over an interval Define a matrix of 1s and 0s indicating the allowed transitions in continuous time. Assume for the moment that people can move to any adjacent disease state, to both more severe or less severe states, and die from any state. From the May workshop notes, remind yourself of how the transition intensities are related to the probabilities governing the state that someone will move to on leaving the current state. From your data summary, make a guess at what these might be. Likewise, roughly guess what the mean sojourn times might be. Use those guesses to construct a matrix of plausible initial values for the intensities. Note that there is no right answer for these initial guesses. The learning objective is to be able to convert between transition intensities and more easily-understood quantities. Call msm to fit the multi-state model, using auto-generated initial values from (2) and the manually-generated values in (3). Death times should be assumed to be known. Check that the results from different initial values agree with each other, and see how close the true maximum likelihoods are to your initial guess. Interpret the maximum likelihood transition intensities in easily-understood terms. 3.10 Solutions statetable.msm(state, PTNUM, data=cav) ## to ## from 1 2 3 4 ## 1 1367 204 44 148 ## 2 46 134 54 48 ## 3 4 13 107 55 Q_cav &lt;- rbind(c(0, 1, 0, 1), c(1, 0, 1, 1), c(0, 1, 0, 1), c(0, 0, 0, 0)) For someone in state \\(r\\), the probability that the next state that they will move to is state \\(s\\) is \\(-q_{rs} / q_{rr}\\). Row \\(r\\) of the transition intensity matrix corresponds to the transitions out of state \\(r\\). We can set initial values for this row by first guessing the mean sojourn time \\(T_r\\), and setting the diagonal entry \\(q_{rr} = -1/T_{r}\\). We then set the remaining, off-diagonal values \\(q_{rs}, s!=r\\) according to guesses of the probability \\(\\pi_{rs}\\) that the next state will be \\(s\\), and deducing that since $_{rs} = \\(-q_{rs} / q_{rr}\\), we can initialise \\(q_{rs} = \\pi_{rs} T_r\\). summary(cav$years) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.000 1.014 3.893 3.845 5.997 19.460 Looking at the range of observation times in the data, we might guess that the mean sojourn time is 2 years (or within an order of magnitude of this), hence the diagonal entries of the Q matrix are all -0.5. Then we might guess that there is an equal chance of moving to each of the permitted next states, and set Q_cav2 &lt;- rbind(c(-0.5, 0.25, 0, 0.25), c( 0.166, -0.5, 0.166, 0.166), c( 0, 0.25, -0.5, 0.25), c( 0, 0, 0, 0)) The output of statetable.msm suggests that while this might not be true, it could be within an order of magnitude of the truth, so is likely to be an acceptable as an initial value for optimisation. cav.msm &lt;- msm(state ~ years, subject=PTNUM, data=cav, gen.inits = TRUE, qmatrix=Q_cav) cav2.msm &lt;- msm(state ~ years, subject=PTNUM, data=cav, qmatrix=Q_cav2) cav.msm ## ## Call: ## msm(formula = state ~ years, subject = PTNUM, data = cav, qmatrix = Q_cav, gen.inits = TRUE) ## ## Maximum likelihood estimates ## ## Transition intensities ## Baseline ## State 1 - State 1 -0.17471 (-0.19506,-0.15649) ## State 1 - State 2 0.12607 ( 0.10968, 0.14491) ## State 1 - State 4 0.04864 ( 0.04008, 0.05903) ## State 2 - State 1 0.23789 ( 0.17790, 0.31810) ## State 2 - State 2 -0.61885 (-0.72334,-0.52945) ## State 2 - State 3 0.30508 ( 0.24457, 0.38056) ## State 2 - State 4 0.07588 ( 0.04289, 0.13427) ## State 3 - State 2 0.15067 ( 0.09222, 0.24616) ## State 3 - State 3 -0.48506 (-0.61548,-0.38227) ## State 3 - State 4 0.33439 ( 0.25533, 0.43794) ## ## -2 * log-likelihood: 3986.087 ## [Note, to obtain old print format, use &quot;printold.msm&quot;] cav2.msm ## ## Call: ## msm(formula = state ~ years, subject = PTNUM, data = cav, qmatrix = Q_cav2) ## ## Maximum likelihood estimates ## ## Transition intensities ## Baseline ## State 1 - State 1 -0.17472 (-0.19507,-0.15650) ## State 1 - State 2 0.12608 ( 0.10969, 0.14492) ## State 1 - State 4 0.04864 ( 0.04008, 0.05903) ## State 2 - State 1 0.23788 ( 0.17789, 0.31809) ## State 2 - State 2 -0.61881 (-0.72330,-0.52942) ## State 2 - State 3 0.30509 ( 0.24458, 0.38057) ## State 2 - State 4 0.07585 ( 0.04285, 0.13425) ## State 3 - State 2 0.15063 ( 0.09220, 0.24612) ## State 3 - State 3 -0.48505 (-0.61548,-0.38227) ## State 3 - State 4 0.33442 ( 0.25535, 0.43798) ## ## -2 * log-likelihood: 3986.087 ## [Note, to obtain old print format, use &quot;printold.msm&quot;] Negligible differences in the estimates and maximised log-likelihood. In practice if the results disagree, the one with the lowest minus 2 x log likelihood is (by definition) closest to the desired maximum likelihood. People in state 1 are around three times as likely to transition next to state 2 (CAV), compared to state 4 (death) (from comparing an intensity of 0.12 with 0.04). The expected time until this transition is -1/0.174 = 6 years. People in state 2 have similar probabilities of transitioning to state 1 and state 3 next, while death is much less likely than a transition to either state 1 or state 3. People in state 3 are twice as likely to die as regress to state 2. Periods in state 2 or state 3 last around 2 years on average. 3.11 Postscript: What if it doesnt converge? A risk of the kinds of models used here is that they may be weakly identifiable from the data. Often the optimisation will not converge, or converge to an answer that its not sensible. A common message is Optimisation has probably not converged to the maximum likelihood - Hessian is not positive definite. Another common symptom is very large confidence intervals for certain parameters, e.g. ## Transition intensities ## Baseline ## State 1 - State 2 0.1 ( 1e-12, 1e+12) The optimiser claims to have found the maximum likelihood, but the answer is not very useful, because the data contain no information about that parameter, hence the likelihood is flat with respect to that parameters. In this case the model should be simplified, e.g. by combining states, constraining intensities to be equal to each other, removing covariates or constraining covariate effects (see the next chapter on covariates) In some circumstances, numerical overflow/underflow can occur during optimisation, giving messages like ## numerical overflow in calculating likelihood In these cases we may be able to control the optimisation and help it find the solution. Normalising the time variable and covariate values can help (e.g. working with years rather than days, so the time variable takes values around 0-10 rather than 0-4000) We can pass arguments to control Rs optim function that msm uses for optimisation, as the control argument to msm. A common trick is to use e.g. msm(..., control=list(fnscale=4000), ...) so that msm will maximise 1/4000 times the log-likelihood, instead of maximising the log-likelihood, if the likelihood takes values of around 4000, say. This ensures that optimisation is done on a normalised scale, helping to avoid numerical computation problems. But often the problem is that the model is too complicated for the data! "],["outputs.html", "Part 4 Prediction from multi-state models 4.1 Mean sojourn time, transition probability matrix 4.2 Characterising uncertainty about functions of intensities 4.3 Total length of stay in states 4.4 Predicting the prevalence of states over time 4.5 Passage probabilities 4.6 Exercises 4.7 Solutions", " Part 4 Prediction from multi-state models Previously we fitted a multi-state model and presented the estimated transition intensities. Multi-state models describe a process evolving over time. Given that fitted model, we usually want to predict what will happen to a person who follows that model. There are various interesting quantities that we could compute, which are functions of the intensities in the model. 4.1 Mean sojourn time, transition probability matrix The mean sojourn times, the expected length of a period spent in each state. \\(-1 / diag(Q)\\), here presented with standard errors and confidence intervals options(digits=3) sojourn.msm(psor.msm) ## estimates SE L U ## State 1 10.96 1.228 8.80 13.65 ## State 2 6.36 0.733 5.08 7.98 ## State 3 3.85 0.501 2.98 4.97 Transition probabilities \\(P = Exp(t Q)\\) over any time interval \\(t\\). These are continuous-time models, so we usually specify the interval \\(t\\) we want to predict over. The default is \\(t=1\\), but this may not be interest pmatrix.msm(psor.msm, t=1) ## State 1 State 2 State 3 State 4 ## State 1 0.913 0.0806 0.00606 0.000547 ## State 2 0.000 0.8546 0.12764 0.017793 ## State 3 0.000 0.0000 0.77119 0.228810 ## State 4 0.000 0.0000 0.00000 1.000000 pmatrix.msm(psor.msm, t=10) ## State 1 State 2 State 3 State 4 ## State 1 0.402 0.268 0.1397 0.190 ## State 2 0.000 0.208 0.2041 0.588 ## State 3 0.000 0.000 0.0744 0.926 ## State 4 0.000 0.000 0.0000 1.000 But where are the standard errors or confidence intervals? 4.2 Characterising uncertainty about functions of intensities Getting confidence intervals and standard errors for transition probabilites and related quantities is not trivial computationally. Two ways in msm: ci=\"normal\". Repeatedly draw from the asymptotic sampling distribution of the estimates, which is a multivariate normal with mean defined by the maximum likelihood estimates, and covariance defined by the (inverse) Hessian at the maximised log likelihood. Compute the P matrix for each draw, and obtain the confidence interval from the quantiles of \\(B\\) samples. pmatrix.msm(psor.msm, ci=&quot;normal&quot;, B=100) ## State 1 State 2 ## State 1 0.9127936 (0.8961672,0.9278201) 0.0806027 (0.0664614,0.0942808) ## State 2 0 0.8545672 (0.8260674,0.8788942) ## State 3 0 0 ## State 4 0 0 ## State 3 State 4 ## State 1 0.0060564 (0.0047179,0.0081961) 0.0005474 (0.0003836,0.0007768) ## State 2 0.1276400 (0.1058010,0.1490273) 0.0177928 (0.0131327,0.0230918) ## State 3 0.7711897 (0.7258676,0.8163848) 0.2288103 (0.1836152,0.2741324) ## State 4 0 1.0000000 (1.0000000,1.0000000) ci=\"boot\". Repeatedly draw bootstrap resamples of the data and refit the model (slower but more accurate, as avoids asymptotic approximation) pmatrix.msm(psor.msm, ci=&quot;boot&quot;, B=100) In both cases, it is sensible to check \\(B\\) is large enough, by computing for larger values of \\(B\\) and checking if the result is stable. 4.3 Total length of stay in states For someone in state \\(r\\) now, over the next \\(t=10\\) years they are expected to spend a total of: ? years in state 1 ? years in state 2  Defined as \\(\\int_{0}^{t} P(u)_{rs} du\\), for each \\(s\\), and computed in msm by the following function totlos.msm(psor.msm, t=10) ## State 1 State 2 State 3 State 4 ## 6.559 2.101 0.733 0.607 Note the difference from the mean sojourn time, which only refers to the time of a single period in the current state. Total length of stay adds up all periods that a person is predicted to spend in a state, both now and in the future. 4.4 Predicting the prevalence of states over time Expected prevalence of state \\(s\\) at time \\(t\\) defined by the transition probabilities to state \\(s\\), averaged by the proportion who start in each state \\(r\\). Model fit can be checked by comparing the expected prevalence with the observed proportion in the data occupying each state at each time. plot.prevalence.msm(psor.msm) Note that observed prevalence at time \\(t\\) is not known if people are not all measured at time \\(t\\), so msm has to estimate this by interpolation. So this check of fit is rough. 4.5 Passage probabilities For a person in state \\(r\\) now, probability that before time \\(t\\), they visited state \\(s\\) at least once. Obtained by defining a new model equivalent to the original model, except that state \\(s\\) is an absorbing state. The passage probability is defined by the transition probabilities to state \\(s\\) in the new model. ppass.msm(psor.msm, tot=10) ## to ## from State 1 State 2 State 3 State 4 ## State 1 1 0.598 0.330 0.190 ## State 2 0 1.000 0.792 0.588 ## State 3 0 0.000 1.000 0.926 ## State 4 0 0.000 0.000 1.000 P &lt;- pmatrix.msm(psor.msm, t=10) For people in state 1, there is a 1 in 3 chance of experiencing progression to state 3 or worse by 10 years. In this model, we could have got the same result by adding the transition probabilities \\(P(t=10)_{13} + P(t=10)_{14}\\), since the event went through state 3 before 10 years is equivalent to is in state 3 or 4 at 10 years. However that reasoning would not work for a model that allowed transitions back from state 3 to state 2. 4.6 Exercises Using the CAV model that you fitted in the exercises from the previous chapter, investigate how the survival probability depends on the state of CAV. For a new heart transplant recipient, how likely is it that someone will experience severe CAV before dying? Does the model appear to fit the data? Note that as well as prevalence estimates, if death times are known, you can also compare estimated survival probabilities with Kaplan-Meier estimates. msm has a shortcut function to do this, called as plot.survfit.msm(x, from=1), where x is your fitted model, and from indicates the starting state from which to forecast survival. Look at the help page for this function and customise the plot to your liking. 4.7 Solutions Picking a range of prediction times covering those in the data (1 year, 5 years, 10 years), we can compute the probability of death (state 4 in the model) by this time by extracting the fourth column of the transition probability matrix. pmatrix.msm(cav.msm, ci=&quot;normal&quot;, t=1)[,4] ## estimate lower upper ## [1,] 0.0501 0.0428 0.0596 ## [2,] 0.0976 0.0761 0.1395 ## [3,] 0.2709 0.2192 0.3319 ## [4,] 1.0000 1.0000 1.0000 pmatrix.msm(cav.msm, ci=&quot;normal&quot;, t=5)[,4] ## estimate lower upper ## [1,] 0.283 0.255 0.316 ## [2,] 0.477 0.419 0.542 ## [3,] 0.725 0.641 0.807 ## [4,] 1.000 1.000 1.000 pmatrix.msm(cav.msm, ci=&quot;normal&quot;, t=10)[,4] ## estimate lower upper ## [1,] 0.544 0.500 0.591 ## [2,] 0.713 0.657 0.767 ## [3,] 0.877 0.815 0.922 ## [4,] 1.000 1.000 1.000 At each time, the risk of death by this time increases sharply with the severity of CAV. These risks are high, but note that the data only include outcomes without treatment. In practice, people who are diagnosed with CAV will get treatment (e.g. coronary artery revascularisation). Outcomes after treatment were excluded from the cav data. We can calculate the passage probability from state 1 (no CAV) to state 3 (severe CAV) for a very high time interval, and check that the result does not change if an even higher time interval is supplied. (tot=Inf will not work) ppass.msm(cav.msm, tot=100)[&quot;State 1&quot;,&quot;State 3&quot;] ## [1] 0.492 ppass.msm(cav.msm, tot=1000)[&quot;State 1&quot;,&quot;State 3&quot;] ## [1] 0.492 pp &lt;- ppass.msm(cav.msm, tot=100, ci=&quot;normal&quot;) pp[1,3] ## estimate lower upper ## 0.492 0.410 0.562 Judging from the comparison of observed and predicted prevalences, and comparing with the Kaplan-Meier survival estimates, the model appears to underestimate the probability of death at later times. plot.prevalence.msm(cav.msm) plot.survfit.msm(cav.msm, from=1, ylab=&quot;Survival probability&quot;, xlab=&quot;Time after transplant&quot;, col=&quot;red&quot;, col.surv=&quot;black&quot;) In fact this is an artefactual finding resulting from people in the data being followed up for different lengths of time. To calculate the probability at each time, msm uses a denominator defined by the number of people whose state we know at this time. This overestimates the probability of death, because the people whose state we know at later times are more likely to be the people who have died. We dont know the state at later times for people whose outcomes were censored at the end of the study when they were still alive. We could correct for this bias if we impose an end of study time for every person, and exclude people from the denominator after this time, even people who we know to have died. These can be supplied as the censtime argument to msm, but these times are not available in the cav dataset supplied with msm. "],["covariates.html", "Part 5 msm models with covariates 5.1 Reminder of covariates in multi-state models 5.2 Choices for modelling covariates 5.3 msm syntax: covariates on rates of specific transitions 5.4 Covariates on all transition rates 5.5 Identical covariate effects on different transitions 5.6 Covariate selection 5.7 Interpretation of the hazard ratio 5.8 Outputs for different covariate values 5.9 Exercises 5.10 Solutions", " Part 5 msm models with covariates 5.1 Reminder of covariates in multi-state models The intensity for each \\(r-s\\) transition can be expressed as a log-linear function of covariates, denoted as a vector \\(\\mathbf{z}\\). \\[\\exp(q_{rs}) = q_{rs}^{(0)} \\exp(\\boldsymbol{\\beta}_{rs}^{\\prime} \\mathbf{z})\\] Psoriatic arthritis example: investigate risk factors for joint damage psor data contains two covariates: hieffusn: Five or more effused joints ollwsdrt: Low erythrocyte sedimentation rate (less than 15 mm/h) Each row of the data contains value for that person at study entry (people just diagnosed), so covariate values are the same throughout each persons follow-up. head(psor, 5) ## ptnum months state hieffusn ollwsdrt ## 1 1 6.46 1 0 1 ## 2 1 17.08 1 0 1 ## 3 2 26.32 1 0 0 ## 4 2 29.48 3 0 0 ## 5 2 30.58 4 0 0 5.2 Choices for modelling covariates Most general model for the psoriatic arthritis data Figure 5.1: Psoriatic arthritis Consider which transitions may be affected by which covariates. Dont just put all covariates on all transitions without thinking  you may not have enough data informing transitions out of particular states. statetable.msm(state, ptnum, data=psor) ## to ## from 1 2 3 4 ## 1 183 56 16 8 ## 2 0 100 35 18 ## 3 0 0 48 37 With 37 transitions, for example, unlikely to get usefully-precise effect estimates for 10 covariates on the State 3 - State 4 transition rate, but 3 covariates may be feasible. No shrinkage / penalized likelihood methods implemented in msm unfortunately, but standard variable selection methods, e.g. AIC, are simple to implement, as we will see. 5.3 msm syntax: covariates on rates of specific transitions Use the covariates argument to msm to place covariates on transition intensities. Set covariates to a list of linear model formulae, named by the transition, to specify which intensities get which covariates. psorc_spec.msm &lt;- msm(state ~ months, subject = ptnum, data = psor, qmatrix = Q, covariates = list(&quot;1-2&quot; = ~ hieffusn, &quot;2-3&quot; = ~ hieffusn + ollwsdrt), gen.inits=TRUE) 5.4 Covariates on all transition rates To put covariates on all the transition rates, can set the covariates argument to a single formula (instead of a list of formulae). psorc_all.msm &lt;- msm(state ~ months, subject = ptnum, data = psor, qmatrix = Q, covariates = ~ hieffusn + ollwsdrt, gen.inits=TRUE) 5.5 Identical covariate effects on different transitions constraint argument: a list with one named element for each covariate with constrained effects. Each list element is a vector of integers, of same length as the number of transition rates. Which elements of this vector are the same determines which covariate effects are assumed to be equal. In this model, the effect of hieffusn is the same for the first two transition rates, i.e. the progression rates from State 1 to 2 and from State 2 to 3, but different for the State 3 - 4 rate psorc_cons.msm &lt;- msm(state ~ months, subject = ptnum, data = psor, qmatrix = Q, covariates = ~ hieffusn + ollwsdrt, constraint = list(hieffusn = c(1,1,2)), gen.inits=TRUE) 5.6 Covariate selection Compare the three different models above using Akaikes information criterion. Not much difference, but lowest AIC from model with different predictors on specific transitions. Given the AICs and the estimates from the full model, it seems sufficient to assume that hieffusn predicts the 1-2 and 2-3 transitions, and ollwsdrt predicts the 2-3 transition. AIC(psorc_spec.msm, psorc_cons.msm, psorc_all.msm) ## df AIC ## psorc_spec.msm 6 1128 ## psorc_cons.msm 8 1129 ## psorc_all.msm 9 1131 5.7 Interpretation of the hazard ratio Hazard ratios represent how the instantaneous risk of making a particular transition is modified by the covariate. Here, someone in state 1 with 5 or more effused joints is at over twice the risk of progression to state 2, at any time, compared to someone with 4 or fewer. print(psorc_all.msm, digits=2) ## ## Call: ## msm(formula = state ~ months, subject = ptnum, data = psor, qmatrix = Q, gen.inits = TRUE, covariates = ~hieffusn + ollwsdrt) ## ## Maximum likelihood estimates ## Baselines are with covariates set to their means ## ## Transition intensities with hazard ratios for each covariate ## Baseline hieffusn ollwsdrt ## State 1 - State 1 -0.10 (-0.127,-0.079) ## State 1 - State 2 0.10 ( 0.079, 0.127) 2.3 (1.09,5.0) 0.73 (0.43,1.26) ## State 2 - State 2 -0.16 (-0.206,-0.128) ## State 2 - State 3 0.16 ( 0.128, 0.206) 1.7 (0.95,3.0) 0.46 (0.26,0.79) ## State 3 - State 3 -0.26 (-0.350,-0.195) ## State 3 - State 4 0.26 ( 0.195, 0.350) 1.4 (0.77,2.5) 1.58 (0.78,3.19) ## ## -2 * log-likelihood: 1113 ## [Note, to obtain old print format, use &quot;printold.msm&quot;] Can also extract with hazard.msm(psorc_all.msm) # alternatively 5.8 Outputs for different covariate values Comparing absolute outcomes between groups can be easier to interpret than hazard ratios. Example: probability of transition from state 1 to severest state 4 by 10 years, compared between combinations of risk factors covariates argument indicates the covariate values \\(\\mathbf{z}\\) to calculate the transition probabilities for. msm will calculate \\(P(t | \\hat{q}, \\hat\\beta, \\mathbf{z})\\) where \\(\\hat{q},\\hat\\beta\\) are the fitted baseline intensities and covariate effects. p00 &lt;- pmatrix.msm(psorc_spec.msm, t=10, covariates=list(hieffusn=0,ollwsdrt=0), ci=&quot;normal&quot;, B=100) p01 &lt;- pmatrix.msm(psorc_spec.msm, t=10, covariates=list(hieffusn=0,ollwsdrt=1), ci=&quot;normal&quot;, B=100) p10 &lt;- pmatrix.msm(psorc_spec.msm, t=10, covariates=list(hieffusn=1,ollwsdrt=0), ci=&quot;normal&quot;, B=100) p11 &lt;- pmatrix.msm(psorc_spec.msm, t=10, covariates=list(hieffusn=1,ollwsdrt=1), ci=&quot;normal&quot;, B=100) p_14 &lt;- rbind(p00[1,4], p01[1,4], p10[1,4], p11[1,4]) Low sedimentation rate is protective (lower transition probabilities for ollwsdrt=1), while high effusion is a risk factor for progression (higher transition probabilities for hieffusn=1) cbind(hieffusn = c(0,0,1,1), ollwsdrt=c(0,1,0,1), p_14) ## hieffusn ollwsdrt estimate lower upper ## [1,] 0 0 0.205 0.1547 0.278 ## [2,] 0 1 0.120 0.0835 0.177 ## [3,] 1 0 0.484 0.2946 0.661 ## [4,] 1 1 0.324 0.1908 0.557 covariates argument can be supplied to most of msms output functions (totlos.msm, ppass.msm, etc.) to indicate the covariate values to calculate the output for. 5.9 Exercises We want to investigate whether heart transplant recipients who have previously had ischaemic heart disease are more at risk of CAV, which is a similar condition. The primary diagnosis (or reason for having a heart transplant) is included in the CAV data in the categorical variable pdiag, which takes the value IHD for ischaemic heart disease. Convert this to a binary variable, and develop a multi-state model like the one you built in the previous chapters, including this binary covariate on all transitions. Adapt the model appropriately so that the covariate is only included on transitions which the covariate is predictive of. Investigate and compare with a model where the effect of this covariate is constrained to be the same between different transitions. Compare the clinical prognosis for people with and without pre-transplant IHD, using outcomes similar to those calculated in the previous chapter. Note if calculating the observed and expected prevalences for a subset of patients, then a subset argument to plot.prevalence.msm should be specified. This should be set to a vector of the unique patient IDs included in the appropriate subset. 5.10 Solutions First we start with the full model where the covariate affects all transitions, and examine the hazard ratios under this model. cav$IHD &lt;- as.numeric(cav$pdiag == &quot;IHD&quot;) cavcov.msm &lt;- msm(state ~ years, subject=PTNUM, data=cav, covariates = ~IHD, gen.inits = TRUE, qmatrix=Q_cav) cavcov.msm ## ## Call: ## msm(formula = state ~ years, subject = PTNUM, data = cav, qmatrix = Q_cav, gen.inits = TRUE, covariates = ~IHD) ## ## Maximum likelihood estimates ## Baselines are with covariates set to their means ## ## Transition intensities with hazard ratios for each covariate ## Baseline IHD ## State 1 - State 1 -0.17497 (-0.19569,-0.15643) ## State 1 - State 2 0.12647 ( 0.10976, 0.14571) 1.5477 (1.1659,2.055) ## State 1 - State 4 0.04850 ( 0.03984, 0.05904) 1.5030 (1.0144,2.227) ## State 2 - State 1 0.24246 ( 0.18121, 0.32443) 0.9155 (0.5113,1.639) ## State 2 - State 2 -0.62377 (-0.73109,-0.53220) ## State 2 - State 3 0.30598 ( 0.24402, 0.38366) 0.9757 (0.6206,1.534) ## State 2 - State 4 0.07533 ( 0.04225, 0.13430) 0.8396 (0.2642,2.669) ## State 3 - State 2 0.15490 ( 0.09473, 0.25329) 0.6782 (0.2537,1.813) ## State 3 - State 3 -0.49373 (-0.62716,-0.38869) ## State 3 - State 4 0.33883 ( 0.25830, 0.44445) 0.7962 (0.4628,1.370) ## ## -2 * log-likelihood: 3939 ## [Note, to obtain old print format, use &quot;printold.msm&quot;] We see that the pre-transplant IHD is associated with an increased risk of CAV onset (state 1 - state 2) and death before CAV onset (state 1 - state 4). The confidence intervals for the hazard ratios of IHD on the other transition rates are wide. Hence we build a simplified model, in which IHD only affects the transition rates out of State 1. This model has an improved AIC compared to the bigger model, despite having 5 fewer parameters (df). cavcov1.msm &lt;- msm(state ~ years, subject=PTNUM, data=cav, covariates = list(&quot;1-2&quot;=~IHD, &quot;1-4&quot;=~IHD), gen.inits = TRUE, qmatrix=Q_cav) AIC(cavcov.msm, cavcov1.msm) ## df AIC ## cavcov.msm 14 3967 ## cavcov1.msm 9 3959 The hazard ratios for IHD on the risk of CAV onset and pre-CAV death appear to be similar, so we might constrain them to be equal, as follows. The AIC is slightly smaller than for the model where these effects are different. cavcov2.msm &lt;- msm(state ~ years, subject=PTNUM, data=cav, covariates = list(&quot;1-2&quot;=~IHD, &quot;1-4&quot;=~IHD), constraint = list(IHD = c(1,1)), gen.inits = TRUE, qmatrix=Q_cav) AIC(cavcov2.msm) ## [1] 3957 However despite the statistical improvement, this model would not be clinically meaningful if pre-transplant IHD affects the risk of CAV onset and death after CAV through different mechanisms. We would then prefer to acknowledge that the true effects might be different. We could compare the transition probabilities at a future time (e.g. 5 years after transplant) for people with and without pre-transplant IHD. The risk of occupying any of the CAV states at this time, and the risk of death by this time, is about 50% more for people with previous IHD, while the chance of being CAV-free (state 1) is correspondingly lower. pmatrix.msm(cavcov.msm, t=5, covariates=list(IHD=0)) ## State 1 State 2 State 3 State 4 ## State 1 0.5828 0.1138 0.0558 0.248 ## State 2 0.2836 0.1218 0.1126 0.482 ## State 3 0.0844 0.0684 0.1044 0.743 ## State 4 0.0000 0.0000 0.0000 1.000 pmatrix.msm(cavcov.msm, t=5, covariates=list(IHD=1)) ## State 1 State 2 State 3 State 4 ## State 1 0.4386 0.1507 0.0919 0.319 ## State 2 0.2222 0.1430 0.1651 0.470 ## State 3 0.0572 0.0697 0.1671 0.706 ## State 4 0.0000 0.0000 0.0000 1.000 The passage probability to severe CAV (which we computed in the previous chapter) is similar between both groups of people, though people who have had IHD are slightly more likely to go through the severe CAV state before they die. ppass.msm(cavcov1.msm, tot=100, covariates=list(IHD=0))[&quot;State 1&quot;,&quot;State 3&quot;] ## [1] 0.484 ppass.msm(cavcov1.msm, tot=100, covariates=list(IHD=1))[&quot;State 1&quot;,&quot;State 3&quot;] ## [1] 0.501 We might also compare the total length of stay in each state over a long time horizon (e.g. 20 years), finding that people who had IHD are expected to spend longer periods of time in the CAV states (2 and 3) and die sooner. totlos.msm(cavcov1.msm, tot=20, covariates=list(IHD=0)) ## State 1 State 2 State 3 State 4 ## 8.661 1.559 0.922 8.859 totlos.msm(cavcov1.msm, tot=20, covariates=list(IHD=1)) ## State 1 State 2 State 3 State 4 ## 6.28 1.83 1.10 10.78 The expected times from state 1 to death (tostate=4) in the two groups can be compared as follows. These are shorter for people who have had IHD. efpt.msm(cavcov1.msm, tostate=4, covariates=list(IHD=0), ci=&quot;normal&quot;)[,1] ## est 2.5% 97.5% ## 13.9 12.0 15.9 efpt.msm(cavcov1.msm, tostate=4, covariates=list(IHD=1), ci=&quot;normal&quot;)[,1] ## est 2.5% 97.5% ## 10.30 8.98 11.57 Lets also compare the observed and expected prevalences. Note the use of the subset argument to restrict the observed prevalences to those observed in the indicated set of patient IDs. ihd_pts &lt;- unique(cav$PTNUM[cav$IHD==1]) notihd_pts &lt;- unique(cav$PTNUM[cav$IHD==0]) plot.prevalence.msm(cavcov.msm, covariates=list(IHD=0), subset=notihd_pts) plot.prevalence.msm(cavcov.msm, covariates=list(IHD=1), subset=ihd_pts) "],["timedep.html", "Part 6 msm models with time-dependent covariates 6.1 Predicting from models with time dependent covariates 6.2 Time itself as a covariate 6.3 Partially-known states 6.4 Shorthand for defining this model in msm 6.5 Output functions for models with pci 6.6 Variants of pci models 6.7 Exercises 6.8 Solutions", " Part 6 msm models with time-dependent covariates Supposing the psor dataset actually measured the clinical risk factors hieffusn and ollwsdrt every time the state is observed, rather than just at the first visit, as in this artificial dataset: head(psor2, 5) ## ptnum months state hieffusn ollwsdrt ## 1 1 6.46 1 0 1 ## 2 1 17.08 1 1 1 ## 3 2 26.32 1 0 0 ## 4 2 29.48 3 0 1 ## 5 2 30.58 4 1 1 We can specify models with time-dependent covariates using exactly the same syntax as for models with time-constant covariates, as in the previous section. msm will assume that the covariate value is constant between observations. This defines a time-inhomogeneous Markov model, with piecewise constant intensities. 6.1 Predicting from models with time dependent covariates The challenge for msm with time-dependent covariates is not fitting, but prediction. To predict, you need to either know in advance how the covariates will change (e.g. year of age, time itself), have a joint model for the covariates and the outcome will change together. 6.1.1 Predicting when we know the covariate value in advance Suppose we have fitted a model with age in years (age) as a time-dependent covariate, e.g. using data like head(psor3, 5) ## ptnum months state age ## 1 1 6 1 50.5 ## 2 1 17 1 51.4 ## 3 2 26 1 52.2 ## 4 2 29 3 52.4 ## 5 2 31 4 52.6 psor_tage.msm &lt;- msm(..., covariates = ~ age) This model specifies the log intensity as a linear function of age, and when fitting it we assumed that in the data, peoples ages didnt change in between their visits. Now we want to predict the transition probability matrix for the state 5 years from now, for someone who is currently aged 50. We must assume the intensities for the predicted individual are piecewise constant. We can make an approximate prediction using pmatrix.piecewise.msm, specifying times when the age changes (hence when the intensity changes) (times) the values that age takes at these times (covariates) pmatrix.piecewise.msm(psor_tage.msm, t1 = 0, t2 = 5, # predict 5 years from now times = c(1,2,3,4), # times when the covariate changes: covariates = list(list(age=50), # value at time 0 list(age=51), # value at time 1 list(age=52), # ... list(age=53), list(age=54))) A finer time grid will give a better approximation to a prediction from the ideal model where risk changes continuously with age. But remember the fitted model itself was based on an approximation to the data, so we can never get an exact prediction from this ideal model. totlos.msm also accepts piecewise.times and piecewise.covariates arguments of the same form, to handle prediction of the total length of stay in states when there are but ppass.msm and efpt.msm are not currently supported with time dependent covariates. 6.1.2 Covariates may themselves change unpredictably Suppose the risk factors were recorded at every visit, instead of just at baseline, and we want to predict risk based on a model with these risk factors as covariates. We can only use pmatrix.piecewise.msm if we specify how the risk factors themselves will change over the prediction interval. If we dont want to condition on a specific future trajectory for the risk factors, we could build a joint model for the clinical state and the risk factors, hence predict both together. If the risk factors are discrete, could build a multi-state model with an expanded state space. Figure 6.1: Joint model for progression of damage This kind of model can be tricky to deal due to the large number of parameters - see e.g. Tom and Farewell For identifiability / interpretability, may need to constrain some parameters to equal each other using the qconstraint option to msm() e.g. might assume the state of damage doesnt affect transition rates between effusion states, but the effusion state affects the rates of progression of joint damage. Appropriate assumption depends on the clinical application. 6.2 Time itself as a covariate Could easily fit a model with the time of the observation as a covariate (months in this example), with a linear effect on the log intensities, e.g. psor.msm &lt;- msm(state ~ months, covariates = ~ months, ... ) Again this assumes that the months covariate is constant between each persons visit. But we may want to express a model with constant intensities within particular time periods (0-6, 6-12 months) hence the intensity changes for everyone at the same time To do this, could define a factor (categorical) covariate for the time period, timeperiod say. Then would need to insert an extra observation at the change times (6 and 12 months) for each person with the value of this covariate: ## ptnum state months timeperiod ## 10 6 1 3.70 [-Inf,6) ## 1.6 6 NA 6.00 [6,12) ## 11 6 1 6.02 [6,12) ## 12 6 2 6.60 [6,12) ## 1.7 6 NA 12.00 [12,Inf) ## 13 6 2 12.52 [12,Inf) ## 14 6 3 13.04 [12,Inf) ## 15 6 3 16.78 [12,Inf) ## 16 6 4 17.28 [12,Inf) impdata ## ptnum state months timeperiod ## 10 6 1 3.70 [-Inf,6) ## 1.6 6 NA 6.00 [6,12) ## 11 6 1 6.02 [6,12) ## 12 6 2 6.60 [6,12) ## 1.7 6 NA 12.00 [12,Inf) ## 13 6 2 12.52 [12,Inf) ## 14 6 3 13.04 [12,Inf) ## 15 6 3 16.78 [12,Inf) ## 16 6 4 17.28 [12,Inf) Problem is that the state is unknown at 6 and 12 years We need a new tool to compute the likelihood in this situation 6.3 Partially-known states If a state is unknown at a particular time, msm can compute the likelihood as a sum over the potential values of the likelihood given the unknown state. Replace the NA values for the unknown state with a code (99, say), and use the following syntax to tell msm what states this code can represent: msm(..., censor = 99, # code that you gave in the data for the unknown state censor.states = c(1,2,3,4) # e.g. if code 99 could mean either state 1, 2, 3 or 4 # defaults to all non-absorbing states ) Two common examples censored survival times when multi-state model includes death as a state. We know someone is alive at the end of the study, but we dont know their clinical state at this time. (as here) time-dependent covariates that change at a common time. We know the covariate value, but not the state, at that time. Footnote: syntax uses the term censor, because a censored random variable is one that is partially observed, but in msm this refers to a partially observed state, not a partially-known event time. 6.4 Shorthand for defining this model in msm Supply the times when all intensities change in the pci argument. psorpci.msm &lt;- msm(state ~ months, subject = ptnum, data = psor, qmatrix = Q, gen.inits=TRUE, pci = c(5,10)) psorpci.msm ## ## Call: ## msm(formula = state ~ months, subject = ptnum, data = psor, qmatrix = Q, gen.inits = TRUE, pci = c(5, 10)) ## ## Maximum likelihood estimates ## Baselines are with covariates set to their means ## ## Transition intensities with hazard ratios for each covariate ## Baseline timeperiod[5,10) ## State 1 - State 1 -0.09001 (-0.11248,-0.07204) ## State 1 - State 2 0.09001 ( 0.07204, 0.11248) 0.8256 (0.4659,1.463) ## State 2 - State 2 -0.16094 (-0.20383,-0.12707) ## State 2 - State 3 0.16094 ( 0.12707, 0.20383) 0.7212 (0.3553,1.464) ## State 3 - State 3 -0.28017 (-0.38534,-0.20370) ## State 3 - State 4 0.28017 ( 0.20370, 0.38534) 0.9398 (0.3507,2.519) ## timeperiod[10,Inf) ## State 1 - State 1 ## State 1 - State 2 0.6993 (0.3976,1.230) ## State 2 - State 2 ## State 2 - State 3 0.7879 (0.4314,1.439) ## State 3 - State 3 ## State 3 - State 4 0.7293 (0.2978,1.786) ## ## -2 * log-likelihood: 1242 ## [Note, to obtain old print format, use &quot;printold.msm&quot;] As in any other model with categorical covariates, msm estimates a hazard ratio of transition: for each category (here, time periods 5-10 and 10+ years), compared to the baseline category (here, 0-5 years) No evidence for time dependence in the intensities 6.5 Output functions for models with pci For models fitted using pci, then the pmatrix.msm and totlos.msm functions will automatically recognise that the model has a covariate representing time since the start of the process. Here, when we predict the transition probabilities over 15 years, it will automatically adjust for the intensities changing at 5 and 10 years. So there is no need to use pmatrix.piecewise.msm or supply a covariates argument. pmatrix.msm(psorpci.msm, t=15) ## State 1 State 2 State 3 State 4 ## State 1 0.255 0.2067 0.1443 0.394 ## State 2 0.000 0.0866 0.1030 0.810 ## State 3 0.000 0.0000 0.0144 0.986 ## State 4 0.000 0.0000 0.0000 1.000 ppass.msm and efpt.msm are not currently supported with time dependent covariates. 6.6 Variants of pci models What if we want to build more detailed models with time-dependence, e.g. models with a different covariate effect for each time period? models where the time period affects some transition rates but not others? 6.6.0.1 Construct the expanded dataset Fit a standard pci model and then use the model.frame function to extract the expanded dataset constructed by msm, with extra rows at the time change points, and an automatically-constructed timeperiod covariate psorpci.msm &lt;- msm(state ~ months, subject = ptnum, covariates = ~hieffusn, data = psor, qmatrix = Q, gen.inits=TRUE, pci = c(5,10)) psor_pcidata &lt;- model.frame(psorpci.msm)[,c(&quot;(subject)&quot;,&quot;(state)&quot;,&quot;(time)&quot;,&quot;timeperiod&quot;,&quot;hieffusn&quot;)] names(psor_pcidata)[1:3] &lt;- c(&quot;ptnum&quot;,&quot;state&quot;,&quot;months&quot;) head(psor_pcidata) ## ptnum state months timeperiod hieffusn ## 1 1 1 6.46 [5,10) 0 ## 1.1 1 5 10.00 [10,Inf) 0 ## 2 1 1 17.08 [10,Inf) 0 ## 3 2 1 26.32 [10,Inf) 0 ## 4 2 3 29.48 [10,Inf) 0 ## 5 2 4 30.58 [10,Inf) 0 6.6.0.2 Fit model to the expanded dataset, using censor Then we can use this dataset for a standard msm fit with timeperiod as a categorical covariate. The missing states at the time change points are given a code equal to 1 plus the number of states here the code is 5, so call msm with censor = 5. Example (a): Time period only affects the rate of the 1-2 transition: psorpci.msm &lt;- msm(state ~ months, subject = ptnum, covariates = list(&quot;1-2&quot; = ~ timeperiod), data = psor_pcidata, censor = 5, qmatrix = Q, gen.inits=TRUE) Example (b): Different effect of hieffusn on 1-2 transition rate in each time period use the * operator in the model formula, standard R syntax for interactions in general linear models psorpci.msm &lt;- msm(state ~ months, subject = ptnum, covariates = list(&quot;1-2&quot; = ~ timeperiod*hieffusn), data = psor_pcidata, censor = 5, qmatrix = Q, gen.inits=TRUE) 6.7 Exercises In the CAV example, investigate how the transition intensities depend on time since transplantation. There is no single correct way to approach this problem - some things that could be done include: Include years since transplant as a covariate with a linear effect on the log intensities, using the same techniques as in the previous chapter. Use pci to fit a model with a categorical time period covariate on all intensities. Extract the imputed dataset that msm constructs in (2), by using model.frame. Use this dataset to build more refined models with categorical time period variables. In each case, AIC could be used to compare models with different assumptions about the covariate effect. Note if you get a numerical overflow error, this may be solved by normalising the optimisation using msm(..., control=list(fnscale=4000)), as described at the end of Chapter 2, noting that the -2 log likelihood in this example takes a value of around 4000. If you get a iteration limit exceeded error, use msm(..., control=list(maxit=10000), ...) or some other large number for maxit. This increases the number of iterations that Rs optim function uses before giving up trying to find the maximum. 6.8 Solutions The following model has a linear effect of time since transplant on all log intensities. The hazards of CAV onset, and the hazards of death in the two CAV states, appear to increase significantly with time. cav.time.msm &lt;- msm(state ~ years, subject=PTNUM, data=cav, covariates = ~ years, gen.inits = TRUE, qmatrix=Q_cav, control = list(fnscale=4000)) cav.time.msm ## ## Call: ## msm(formula = state ~ years, subject = PTNUM, data = cav, qmatrix = Q_cav, gen.inits = TRUE, covariates = ~years, control = list(fnscale = 4000)) ## ## Maximum likelihood estimates ## Baselines are with covariates set to their means ## ## Transition intensities with hazard ratios for each covariate ## Baseline years ## State 1 - State 1 -0.18901 (-0.21549,-0.16579) ## State 1 - State 2 0.14273 ( 0.12137, 0.16785) 1.0938 (1.0367,1.154) ## State 1 - State 4 0.04628 ( 0.03624, 0.05911) 0.9776 (0.8925,1.071) ## State 2 - State 1 0.29894 ( 0.21330, 0.41895) 0.8895 (0.7828,1.011) ## State 2 - State 2 -0.64328 (-0.77271,-0.53553) ## State 2 - State 3 0.28957 ( 0.23049, 0.36379) 0.9918 (0.9161,1.074) ## State 2 - State 4 0.05477 ( 0.02672, 0.11228) 1.2595 (1.0990,1.443) ## State 3 - State 2 0.12859 ( 0.05976, 0.27667) 1.0878 (0.8466,1.398) ## State 3 - State 3 -0.33762 (-0.49468,-0.23042) ## State 3 - State 4 0.20903 ( 0.13546, 0.32255) 1.2024 (1.0680,1.354) ## ## -2 * log-likelihood: 3928 ## [Note, to obtain old print format, use &quot;printold.msm&quot;] We might simplify this model to include only the effects that appeared to be significant. cav.timei.msm &lt;- msm(state ~ years, subject=PTNUM, data=cav, covariates = list(&quot;1-2&quot;=~ years, &quot;2-1&quot; = ~years, &quot;2-4&quot;=~years, &quot;3-4&quot;=~years), gen.inits = TRUE, qmatrix=Q_cav, control = list(fnscale=4000)) cav.timei.msm ## ## Call: ## msm(formula = state ~ years, subject = PTNUM, data = cav, qmatrix = Q_cav, gen.inits = TRUE, covariates = list(`1-2` = ~years, `2-1` = ~years, `2-4` = ~years, `3-4` = ~years), control = list(fnscale = 4000)) ## ## Maximum likelihood estimates ## Baselines are with covariates set to their means ## ## Transition intensities with hazard ratios for each covariate ## Baseline years ## State 1 - State 1 -0.19069 (-0.21699,-0.16759) ## State 1 - State 2 0.14271 ( 0.12135, 0.16783) 1.0896 (1.0331,1.149) ## State 1 - State 4 0.04799 ( 0.03954, 0.05824) 1.0000 ## State 2 - State 1 0.30253 ( 0.21614, 0.42343) 0.8874 (0.7809,1.009) ## State 2 - State 2 -0.64805 (-0.77819,-0.53968) ## State 2 - State 3 0.29110 ( 0.23292, 0.36380) 1.0000 ## State 2 - State 4 0.05443 ( 0.02660, 0.11138) 1.2410 (1.0801,1.426) ## State 3 - State 2 0.15551 ( 0.09524, 0.25393) 1.0000 ## State 3 - State 3 -0.36017 (-0.49622,-0.26142) ## State 3 - State 4 0.20466 ( 0.13231, 0.31655) 1.2134 (1.0816,1.361) ## ## -2 * log-likelihood: 3929 ## [Note, to obtain old print format, use &quot;printold.msm&quot;] Or go even further and constrain the hazard ratio for time on death from the two CAV states to be the same, as the mechanism for these effects is plausibly the same. cav.timec.msm &lt;- msm(state ~ years, subject=PTNUM, data=cav, covariates = list(&quot;1-2&quot;=~ years, &quot;2-1&quot;=~years, &quot;2-4&quot;=~years, &quot;3-4&quot;=~years), constraint = list(years = c(1,2,3,3)), gen.inits = TRUE, qmatrix=Q_cav, control = list(fnscale=4000)) cav.timec.msm ## ## Call: ## msm(formula = state ~ years, subject = PTNUM, data = cav, qmatrix = Q_cav, gen.inits = TRUE, covariates = list(`1-2` = ~years, `2-1` = ~years, `2-4` = ~years, `3-4` = ~years), constraint = list(years = c(1, 2, 3, 3)), control = list(fnscale = 4000)) ## ## Maximum likelihood estimates ## Baselines are with covariates set to their means ## ## Transition intensities with hazard ratios for each covariate ## Baseline years ## State 1 - State 1 -0.19041 (-0.21659,-0.16739) ## State 1 - State 2 0.14244 ( 0.12116, 0.16747) 1.0899 (1.0334,1.149) ## State 1 - State 4 0.04797 ( 0.03952, 0.05821) 1.0000 ## State 2 - State 1 0.30127 ( 0.21519, 0.42180) 0.8881 (0.7814,1.009) ## State 2 - State 2 -0.64901 (-0.77729,-0.54190) ## State 2 - State 3 0.29126 ( 0.23309, 0.36394) 1.0000 ## State 2 - State 4 0.05648 ( 0.03243, 0.09838) 1.2257 (1.1384,1.320) ## State 3 - State 2 0.15532 ( 0.09508, 0.25373) 1.0000 ## State 3 - State 3 -0.35441 (-0.47270,-0.26572) ## State 3 - State 4 0.19908 ( 0.14019, 0.28272) 1.2257 (1.1384,1.320) ## ## -2 * log-likelihood: 3929 ## [Note, to obtain old print format, use &quot;printold.msm&quot;] AIC(cav.time.msm, cav.timei.msm, cav.timec.msm) ## df AIC ## cav.time.msm 14 3956 ## cav.timei.msm 11 3951 ## cav.timec.msm 10 3949 An alternative approach is based on discretising time, and defining different effects in different time periods, e.g. before and after 5 years. We could use pci to fit a model where all intensities have an effect of time period, and then extract the imputed dataset to build more elaborate models of this type. cav.pci5.msm &lt;- msm(state ~ years, subject=PTNUM, data=cav, pci = c(5), gen.inits = TRUE, qmatrix=Q_cav, control = list(fnscale=4000, maxit=10000)) cav_imp &lt;- model.frame(cav.pci5.msm) names(cav_imp)[1:3] &lt;- c(&quot;PTNUM&quot;,&quot;state&quot;,&quot;years&quot;) To the dataset with values of years and timeperiod values imputed at 5 years, we fit two alternative models, both with a covariate effect on the intensities where the effect was significant (from the non-imputed datasets) and with the effects on death constrained to be the same. f One model has a linear effect of a continuous time covariate, and in the other model, this covariate is discretised at 5 years. cav.imp.linear.msm &lt;- msm(state ~ years, subject=PTNUM, data=cav_imp, covariates = list(&quot;1-2&quot;=~years, &quot;2-1&quot;=~years, &quot;2-4&quot;=~years, &quot;3-4&quot;=~years), censor = 5, gen.inits = TRUE, qmatrix=Q_cav, control = list(fnscale=4000,maxit=10000)) cav.imp.binary.msm &lt;- msm(state ~ years, subject=PTNUM, data=cav_imp, covariates = list(&quot;1-2&quot;=~timeperiod, &quot;2-1&quot;=~timeperiod, &quot;2-4&quot;=~timeperiod, &quot;3-4&quot;=~timeperiod), censor = 5, gen.inits = TRUE, qmatrix=Q_cav, control = list(fnscale=4000,maxit=10000)) AIC(cav.pci5.msm, cav.imp.linear.msm, cav.imp.binary.msm) ## df AIC ## cav.pci5.msm 14 3966 ## cav.imp.linear.msm 11 3999 ## cav.imp.binary.msm 11 4000 It does not make much difference to AIC whether time is treated as a continuous or a binary covariate. Note that it might be possible to find even better fitting models than these - but With intermittently-observed data, it is difficult to produce exploratory plots that would indicate what the shape of the dependence on time might be, or what cut-points for time periods might be appropriate. "],["advanced.html", "Part 7 Advanced topics 7.1 Misclassified states 7.2 General hidden Markov models 7.3 Semi-Markov models 7.4 msm cant do", " Part 7 Advanced topics 7.1 Misclassified states In the CAV example, the true state of disease is measured with error. We allowed backwards transitions to less severe disease states, though those are artefacts of misclassification and not clinically plausible. msm can fit a Markov model to the latent true states, while estimating the error rates of the screening test that measures the disease state. This enables a more plausible model to be fitted which does not allow backwards transitions. See ematrix argument to msm. A worked example is in the package vignette. Figure 7.1: Hidden Markov model 7.2 General hidden Markov models In msm we can have an outcome of any kind that is generated conditionally on a hidden disease state. We specify a continuous-time Markov model for the hidden state a model for the distribution of the outcome given the hidden state (e.g. normal, binomial, Poisson). We can even have multiple outcomes generated conditionally independently given the same hidden state. Examples: one or more symptoms of a disease are observed intermittently, which together indicate clinically-meaningful presence/absence of a disease. See hmodel argument to the msm function. A worked example is in the package vignette.msm` function. For a multivariate example in psoriatic arthritis, see. e.g. Jackson et al.. 7.3 Semi-Markov models In a Markov model, the time to the next state does not depend on how long you have spent in that state. Relaxing that assumption is tricky if the data are intermittently observed, because the time of state entry is unknown. 7.3.1 phase-type semi-Markov model To relax the Markov assumption for a specific state, split up that state into hidden phases and define a Markov model on a state space defined by the phases and the remaining states. Transition time between the phases is unknown. Figure 7.2: Phase-type semi-Markov model This is a (partially) hidden Markov model, hence can be implemented in msm. See the phase.states option to the msm function. Idea from Titman and Sharples 7.4 msm cant do Random effects (frailty) multi-state models. Theoretically possible in JAGS or Stan (Bayesian approach) but unaware of any worked examples. Models with informative sampling times (e.g. person is more likely to be observed at times when their disease is more severe.) See e.g. Cook and Lawless Lange et al have some R code "]]
